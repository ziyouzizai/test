<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>reyun</groupId>
	<artifactId>dmp-fec</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>dmp-fec Maven Webapp</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<spring.version>4.2.1.RELEASE</spring.version>
		<log4j.version>2.3</log4j.version>
		<slf4j.version>1.7.5</slf4j.version>
		<logback.version>1.0.13</logback.version>
		<jackson.version>2.9.3</jackson.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>

		<!-- 导入servlet jar 包  -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>

		<!-- spring框架库 
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>-->
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<!-- 
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>-->

		<!-- log start  -->
		<!-- LOGGING支持库，格式化对象，方便输出日志  <dependency> <groupId>log4j</groupId> <artifactId>log4j</artifactId> 
			<version>1.2.17</version> <type>jar</type> <scope>compile</scope> </dependency> -->

		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.6.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.6.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>2.6.2</version>
		</dependency>
		
		<dependency>
		  <groupId>com.lmax</groupId>
		  <artifactId>disruptor</artifactId>
		  <version>3.3.7</version>
		</dependency>
		<!-- log start  
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-web</artifactId>
			<version>2.6.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>2.6.2</version>
		</dependency>
		
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-1.2-api</artifactId>
			<version>2.6.2</version>
		</dependency>
		
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>-->
		<!-- <dependency> <groupId>dom4j</groupId> <artifactId>dom4j</artifactId> 
			<version>1.6.1</version> </dependency> 
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<scope>runtime</scope>
		</dependency>-->
		<!-- log end -->
		
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.2</version>
		</dependency>
		<!-- <dependency> <groupId>org.apache.httpcomponents</groupId> <artifactId>httpclient</artifactId> 
			<version>4.3</version> </dependency> -->
		<!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpmime -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpmime</artifactId>
			<version>4.5.2</version>
		</dependency>
		
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>1.4</version>
		</dependency>
		<!-- log start  <dependency>
			<groupId>org.apache.mina</groupId>
			<artifactId>mina-core</artifactId>
			<version>2.0.7</version>
		</dependency>-->

		<!-- Json支持库，mappingJacksonHttpMessageConverter，请求响应消息序列化转换 -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson 
		<dependency>
		    <groupId>com.google.code.gson</groupId>
		    <artifactId>gson</artifactId>
		    <version>2.8.0</version>
		</dependency>-->
		
		<dependency>
			<groupId>net.sf.json-lib</groupId>
			<artifactId>json-lib</artifactId>
			<version>2.4</version>
			<classifier>jdk15</classifier>
		</dependency>
		<!-- log start  
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>3.4.0</version>
		</dependency>-->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>22.0</version>
		</dependency>

		<dependency>
		    <groupId>com.amazonaws</groupId>
		    <artifactId>aws-java-sdk-core</artifactId>
		    <version>1.11.211</version>
		</dependency>
		<dependency>
		    <groupId>com.amazonaws</groupId>
		    <artifactId>aws-java-sdk-s3</artifactId>
		    <version>1.11.211</version>
		</dependency>
		
	</dependencies>

	<build>
		<finalName>dmp-fec</finalName>
		<plugins>
			<plugin>
	        	<groupId>org.apache.maven.plugins</groupId>
	        	<artifactId>maven-compiler-plugin</artifactId>
	        	<version>3.2</version>
	        	<configuration>
	          		<source>1.8</source>
	          		<target>1.8</target>
	          		<encoding>UTF-8</encoding>
	        	</configuration>
	      	</plugin>
            
			<!-- ProGuard混淆插件-->
			<plugin>
			   <groupId>com.github.wvengen</groupId>
			   <artifactId>proguard-maven-plugin</artifactId>
			   <version>2.0.11</version>
			   <executions>
			      <execution>
			         <!-- 混淆时刻，这里是打包的时候混淆-->
			         <phase>package</phase>
			         <goals>
			            <!-- 使用插件的什么功能，当然是混淆-->
			            <goal>proguard</goal>
			         </goals>
			      </execution>
			   </executions>
			   <configuration>
			      <!-- 是否将生成的PG文件安装部署-->
			      <attach>true</attach>
			      <!-- 是否混淆-->
			      <obfuscate>true</obfuscate>
			      <!-- 指定生成文件分类 -->
			      <attachArtifactClassifier>pg</attachArtifactClassifier>
			      <options>
			         <!-- JDK目标版本1.8-->
			         <option>-target 1.8</option>
			         <!-- 不做收缩（删除注释、未被引用代码）-->
			         <option>-dontshrink</option>
			         <!-- 不做优化（变更代码实现逻辑）-->
			         <option>-dontoptimize</option>
			         <!-- 不路过非公用类文件及成员-->
			         <option>-dontskipnonpubliclibraryclasses</option>
			         <option>-dontskipnonpubliclibraryclassmembers</option>
			         <!--不用大小写混合类名机制-->
			         <option>-dontusemixedcaseclassnames</option>
			 
			         <!-- 优化时允许访问并修改有修饰符的类和类的成员 -->
			         <option>-allowaccessmodification</option>
			         <!-- 确定统一的混淆类的成员名称来增加混淆-->
			         <option>-useuniqueclassmembernames</option>
			         <!-- 不混淆所有包名-->
			         <option>-keeppackagenames</option>
			 
			         <!-- 需要保持的属性：异常，注解等-->
			         <option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod</option>
			         <!-- 不混淆所有的set/get方法-->
			         <option>-keepclassmembers public class * {void set*(***);*** get*();}</option>
			 
			         <!-- 不混淆包下的所有类名，但对类中的属性、方法进行混淆，原因是Spring配置中用到了这个类名-->
			         <option>-keep class com.reyun.dmp.enums.** </option>
			         <!-- 不混淆包下的所有类名，且类中的方法也不混淆-->
			         <option>-keep class com.reyun.dmp.entity.** { &lt;methods&gt;; } </option>
			         <!-- 不混淆model包中的所有类以及类的属性及方法，实体包，混淆了会导致ORM框架及前端无法识别-->
			         <option>-keep class com.reyun.dmp.exception.** { *; }</option>
			 
			      </options>
			      <!--class 混淆后输出的jar包-->
			      <outjar>${project.build.finalName}-pg.jar</outjar>
			      <!-- 添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了 -->
			      <libs>
			         <lib>${java.home}/lib/rt.jar</lib>
			         <lib>${java.home}/lib/jce.jar</lib>
			         <lib>${java.home}/lib/ext/sunjce_provider.jar</lib>
			      </libs>
			      <!-- 对什么东西进行加载，这里仅有classes成功，毕竟你也不可能对配置文件及JSP混淆吧-->
			      <injar>classes</injar>
			      <!-- 输出目录-->
			      <outputDirectory>${project.build.directory}</outputDirectory>
			   </configuration>
			</plugin>
		</plugins>
	</build>
</project>

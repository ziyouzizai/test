import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.Pipeline;
import test.redis.JedisPoolHolder;

public class RedisTest {
	public static void main(String[] args) {
//		bfSave();
//		String ciphertext = "";
//		String ciphertext = "";
//		bfRecovery(ciphertext);
		
		timeTest();
	}
	
	public static void timeTest() {
		JedisPool pool = JedisPoolHolder.getJedisPool();
		try {
			Jedis jedis = pool.getResource();
			jedis.flushDB();
			String redisKey = "timetest";
			
			int N = 1000000;
			List<String> totalList = new ArrayList<>();
			List<String> trueList = new ArrayList<>();
			List<String> falseList = new ArrayList<>();
			for(int i=0;i<N;i++) {
				String idfa = UUID.randomUUID().toString();
				totalList.add(idfa);
				if(i < N/100) {
					trueList.add(idfa);
				}
			}
			for(int i=0;i<N/100;i++) {
				String idfa = UUID.randomUUID().toString();
				falseList.add(idfa);
			}
			RedisBloomFilter rbf = new RedisBloomFilter(jedis,redisKey,N,0.01);
			
			long start = System.currentTimeMillis();
			for(int i=0;i<N;i++) {
				rbf.put(totalList.get(i));
			}
			long end = System.currentTimeMillis();
			System.out.println(String.format("put %d idfa cost %d ms",N,(end - start)));
			
			int ct = 0;
			long start1 = System.currentTimeMillis();
			for(int i=0;i<trueList.size();i++) {
				if(!rbf.isExist(trueList.get(i))) {
					ct ++;
//					System.out.println("trueList not exists:" + trueList.get(i));
				}
			}
			long end1 = System.currentTimeMillis();
			System.out.println(String.format("trueList error [%d/%d] cost %d ms",ct,trueList.size(),(end1 - start1)));
			
			int ft = 0;
			long start2 = System.currentTimeMillis();
			for(int i=0;i<falseList.size();i++) {
				if(rbf.isExist(falseList.get(i))) {
					ft ++;
//					System.out.println("falseList exists:" + falseList.get(i));
				}
			}
			long end2 = System.currentTimeMillis();
			System.out.println(String.format("falseList error [%d/%d] cost %d ms",ft,falseList.size(),(end2 - start2)));
			
			
			String ciphertext = RedisBloomFilter.dump(rbf);
			System.out.println(ciphertext);
			System.out.println(ciphertext.length());
		}finally {
			JedisPoolHolder.closePool();
		}
	}
	
	public static void bfSave() {
		JedisPool pool = JedisPoolHolder.getJedisPool();
		try {
			Jedis jedis = pool.getResource();
			jedis.flushDB();
			
			String redisKey = "test";
			RedisBloomFilter rbf = new RedisBloomFilter(jedis,redisKey,10000,0.01);
			for(int i=0;i<10000;i++) {
				rbf.put("val" + i);
			}
			
			List<String> vlist = new ArrayList<>();
			for(int i=300;i<3300;i+=300) {
				vlist.add("val" + i);
			}
			for(int i=10000;i<10090;i++) {
				vlist.add("value" + i);
			}
			
			int c = 0;
			for(String item : vlist) {
				if(!rbf.isExist(item)) {
					System.out.println(String.format("%d,%s",c++,item));
				}
			}
			System.out.println("c = " + c);
			
			String s = RedisBloomFilter.dump(rbf);
			System.out.println(s);
		}finally {
			JedisPoolHolder.closePool();
		}
	}
	
	public static void bfRecovery(String ciphertext) {
		JedisPool pool = JedisPoolHolder.getJedisPool();
		try {
			Jedis jedis = pool.getResource();
			jedis.flushDB();
			String newRedisKey = "newtest";
			RedisBloomFilter rbf = RedisBloomFilter.recovery(jedis,newRedisKey, ciphertext);
			
			List<String> vlist = new ArrayList<>();
			for(int i=300;i<3300;i+=300) {
				vlist.add("val" + i);
			}
			for(int i=10000;i<10090;i++) {
				vlist.add("value" + i);
			}
			
			int c = 0;
			for(String item : vlist) {
				if(!rbf.isExist(item)) {
					System.out.println(String.format("%d,%s",c++,item));
				}
			}
			System.out.println("c = " + c);
		}finally {
			JedisPoolHolder.closePool();
		}
	}
	
	public static void bfSaveTest() {
		JedisPool pool = getJedisPool();
		Jedis jedis = pool.getResource();
		jedis.flushDB();
		
		long num = jedis.bitcount("bf:test");
		System.out.println(num);
		Pipeline pipeline = jedis.pipelined();
		try {
			pipeline.setbit("bf:bt",0, true);
			pipeline.setbit("bf:bt",2, true);
			pipeline.setbit("bf:bt",3, true);
			pipeline.setbit("bf:bt",1000,true);
			pipeline.sync();
		}finally {
			pipeline.close();
		}
		jedis.set("test","hello");
//		byte[] bt = jedis.get("bf:bt".getBytes());
		byte[] bt = jedis.get("test".getBytes());
		System.out.println("byte[] size=" + bt.length);
		for(byte b : bt) {
//			System.out.println(Integer.toBinaryString(b));
			System.err.println(toBinaryString(b));
		}
	}
	public static String toBinaryString(byte b) {
		short[] masks = new short[] {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
		StringBuffer sb = new StringBuffer();
		for(int i=Byte.SIZE -1;i >= 0;i--) {
			sb.append((b & masks[i]) > 0 ? "1" : "0");
		}
		return sb.toString();
	}
	
	public static void bftest() {
		BloomFilter bf = new BloomFilter();
		bf.refresh();
		
		List<String> list = new ArrayList<>();
		List<String> testList = new ArrayList<>();
		for(int i=1;i<=20000;i++) {
			String idfa = UUID.randomUUID().toString();
			list.add(idfa);
			if(i % 100 == 0) {
				testList.add(idfa);
			}
		}
		for(int i=0;i<100;i++) {
			String idfa = UUID.randomUUID().toString();
			testList.add(idfa);
		}
		long start = System.currentTimeMillis();
		for(int i=0;i<list.size();i++) {
			bf.put("test",list.get(i));
		}
		long end = System.currentTimeMillis();
		System.out.println(String.format("cost %d ms",(end - start)));
		int c = 0;
		for(int i=0;i<testList.size();i++) {
			boolean flag = bf.isExist("test",testList.get(i));
			if(!flag) {
				System.out.println(String.format("%d,%s",i,testList.get(i)));
				c++;
			}
		}
		long end2 = System.currentTimeMillis();
		System.out.println("check cost " + (end2 - end) + "ms error:" + c);
	}
	
	public static JedisPool getJedisPool() {
		JedisPoolConfig config = new JedisPoolConfig(); 
        config.setMaxTotal(10);
        config.setMaxIdle(5);
        config.setMaxWaitMillis(1000L);
        config.setTestOnBorrow(false);
        
        return new JedisPool(config,"127.0.0.1",6379);
	}
}
